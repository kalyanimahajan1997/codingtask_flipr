#include <bits/stdc++.h>
using namespace std;
bool isvalid(int i, int j, int R, int C)
{
    return (i >= 0 && j >= 0 && i < R && j < C);
}
 
struct ele {
    int x, y;
};
 
bool isdelim(ele temp)
{
    return (temp.x == -1 && temp.y == -1);
}
 
bool checkall(vector<vector<int> > &matrix, int R, int C)
{
    for (int i=0; i<R; i++)
       for (int j=0; j<C; j++)
          if (matrix[i][j] == 1)
             return true;
    return false;
}

int rotOranges(vector<vector<int> > &matrix, int R, int C)
{
    queue<ele> Q;
    ele temp;
    int ans = 0;
    for (int i=0; i<R; i++)
    {
       for (int j=0; j<C; j++)
       {
            if (matrix[i][j] == 2)
            {
                temp.x = i;
                temp.y = j;
                Q.push(temp);
            }
        }
    }
    temp.x = -1;
    temp.y = -1;
    Q.push(temp);

    while (!Q.empty())
    {

        bool flag = false;

        while (!isdelim(Q.front()))
        {
            temp = Q.front();
 
            if (isvalid(temp.x+1, temp.y, R, C) && matrix[temp.x+1][temp.y] == 1)
            {
                
                if (!flag) ans++, flag = true;     
                matrix[temp.x+1][temp.y] = 2;
                temp.x++;
                Q.push(temp);
 
                temp.x--; 
            }
            if (isvalid(temp.x-1, temp.y, R, C) && matrix[temp.x-1][temp.y] == 1) {
                if (!flag) ans++, flag = true;
                matrix[temp.x-1][temp.y] = 2;
                temp.x--;
                Q.push(temp); 
                temp.x++;
            }
            if (isvalid(temp.x, temp.y+1, R, C) && matrix[temp.x][temp.y+1] == 1) {
                if (!flag) ans++, flag = true;
                matrix[temp.x][temp.y+1] = 2;
                temp.y++;
                Q.push(temp); 
                temp.y--;
            }
            if (isvalid(temp.x, temp.y-1, R, C) && matrix[temp.x][temp.y-1] == 1) {
                if (!flag) ans++, flag = true;
                matrix[temp.x][temp.y-1] = 2;
                temp.y--;
                Q.push(temp); 
            }
             Q.pop();
        }
        Q.pop();
        if (!Q.empty()) {
            temp.x = -1;
            temp.y = -1;
            Q.push(temp);
        } 
    }
    return (checkall(matrix,R,C))? -1: ans;
}
int main()
{
int t;
cin>>t;
while(t--)
{
int R,C;
cin>>R>>C;
vector<vector<int>>matrix(R);
for(int i=0;i<R;i++)
{
matrix[i].resize(C);
for(int j=0;j<C;++j)
  cin>>matrix[i][j];
}
cout<<rotOranges(matrix,R,C)<<endl;
}
return 0;
}